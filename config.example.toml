# Redline Configuration File
# --------------------------
# This file contains the configuration for the Redline benchmark tool.
# It is divided into several sections, each controlling a specific aspect of the benchmark.

# ## Parallelism
#
# Indicates how many concurrent benchmarks to run.
# Each unit of parallelism will start its own thread of execution, dramatically
# increasing the load on the target validator. For example, a parallelism of 10
# will result in a 10x higher load compared to a parallelism of 1.
parallelism = 1

# ## Path to keypairs
#
# Directory where vault and signer keypairs are stored
keypairs = "keypairs/"

# ## ER Authority/Identity
#
# The pubkey of the validator (ER) identity, which
# is used as a target for account delegation
authority = "mAGicPQYBMvcYveUZA5F5UNNwyHvfYh5xkLS2Fr1mev"

# ## Connection Settings
#
# Configures the network parameters for connecting to the Solana cluster.
[connection]
# URL of the main chain node to connect to.
chain-url = "http://api.devnet.solana.com"
# URL of the ephemeral node to connect to.
ephem-url = "http://127.0.0.1:8899"
# Type of HTTP connection to use.
# Options: "http1" or "http2"
http-connection-type = "http2"
# Maximum number of HTTP connections to establish.
http-connections-count = 16
# Maximum number of WebSocket connections to establish.
ws-connections-count = 16

# ## Benchmark Settings
#
# Configures the execution of the benchmark, including the mode, load, and duration.
[benchmark]
# The total number of requests or transactions to send.
iterations = 100000
# The desired rate of requests or transactions per second (RPS/TPS).
# This serves as a hint rather than a strict limit. If the target rate exceeds
# the validator's capacity, the actual rate will be lower.
rate = 3000
# The number of concurrent tasks to use for sending requests.
concurrency = 64
# The frequency, in milliseconds, at which account cloning should be triggered.
# to disable cloning, set this value to 0
clone-frequency-ms = 1000
# A flag to enable or disable the preflight check for transactions.
preflight-check = false
# The number of accounts to use for the benchmark.
accounts-count = 8
# The benchmark mode to execute.
# See below for a detailed explanation of each mode.
mode = { mixed = [
  { mode = { high-cu-cost = { iters = 23 } }, weight = 50 },
  { mode = { simple-byte-set = {} }, weight = 29 },
  { mode = { read-write = {} }, weight = 20 },
  { mode = { commit = { accounts-per-transaction = 2 } }, weight = 1 },
] }

# ### Benchmark Modes
#
# Redline supports a variety of benchmark modes, which can be combined in a mixed workload.
#
# #### Transaction-Based Modes
#
# - **simple-byte-set**: Writes a small set of bytes to a specified number of accounts.
#   mode = { simple-byte-set = {} }
#
# - **high-cu-cost**: Executes transactions with high computational cost to stress the validator's processing capacity.
#   mode = { high-cu-cost = { iters = 28 } }
#
# - **read-write**: Performs read and write operations across a set of accounts to test for lock contention.
#   mode = { read-write = {} }
#
# - **read-only**: Executes read-only transactions to measure parallel processing performance.
#   mode = { read-only = { accounts-per-transaction = 8 } }
#
# - **commit**: Sends commit transactions to the Ephemeral Rollup (ER) to test state-committing performance.
#   mode = { commit = { accounts-per-transaction = 8 } }
#
# #### RPC-Based Modes
#
# - **get-account-info**: Fetches account information for a single account.
#   mode = "get-account-info"
#
# - **get-multiple-accounts**: Fetches account information for multiple accounts in a single request.
#   mode = "get-multiple-accounts"
#
# - **get-balance**: Fetches the balance of a single account.
#   mode = "get-balance"
#
# - **get-token-account-balance**: Fetches the token balance of a single token account.
#   mode = "get-token-account-balance"
#
# #### Mixed Mode
#
# Combines multiple benchmark modes with specified weights. The weights determine the
# frequency of each mode in the benchmark.
#
# [[benchmark.mode.mixed]]
# mode = { high-cu-cost = { iters = 23 } }
# weight = 50
# [[benchmark.mode.mixed]]
# mode = { simple-byte-set = {} }
# weight = 29
# [[benchmark.mode.mixed]]
# mode = { read-write = {} }
# weight = 20
# [[benchmark.mode.mixed]]
# mode = { commit = { accounts-per-transaction = 2 } }
# weight = 1

# ## Confirmation Settings
#
# Specifies how to handle transaction and event confirmations.
[confirmations]
# Subscribe to account notifications for transaction confirmations.
subscribe-to-accounts = true
# Subscribe to signature notifications for transaction confirmations.
subscribe-to-signatures = true
# Use `getSignatureStatuses` for transaction confirmations. (not yet implemented)
get-signature-status = false
# Enforce total synchronization, ensuring all confirmations are received before completing a transaction.
# This will significantly decrease throughput, but provide more accurate latency measurements.
enforce-total-sync = true

# ## Data Settings
#
# Configures the parameters for account data used in the benchmark.
[data]
# The encoding for account data.
# Options: "base58", "base64", "base64+zstd"
account-encoding = "base64+zstd"
# The size of the accounts to be created.
# Options: "bytes128", "bytes512", "bytes2048", "bytes8192"
account-size = "bytes128"
